import os
import gaiya.malware_family.config as config

from gaiya.malware_family import Alpha


class mayday(Alpha):
    NAME = "mayday"

    def __init__(self):
        super(mayday, self).__init__()
        self.logger = self._init_logger()
        self.arch_ability = self.get_current_ability()
        self.module_dir = os.path.dirname(os.path.abspath(__file__))
        self.project_ida_python_script_path = os.path.join(os.path.dirname(self.module_dir), config.SCRIPT_PATH_NAME)

    def get_current_ability(self):
        lst = []
        path = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
        arch_parent_dir = os.path.join(path, os.path.join(config.SCRIPT_PATH_NAME, self.NAME))
        print(arch_parent_dir)
        for arch in os.listdir(arch_parent_dir):
            abs_path = os.path.join(arch_parent_dir, arch)
            if not os.path.isdir(abs_path):
                continue
            lst.append(arch)
        return lst

    def _assemble_ida_script_args(self, arch):
        ida_script_path = os.path.join(config.IDA_PYTHON_INSTALLED_PATH, config.MODULE_NAME, self.NAME, arch,
                                       "extract.py")
        ida_script_arg = os.path.join(self.project_ida_python_script_path, self.NAME, arch)
        return f"{ida_script_path} {ida_script_arg}"

    def run(self, data):
        self.logger.info(f"{self.NAME} plugin run.")
        self.copy_script_to_ida()
        for file_abs_path, meta_data in data.items():
            arch = meta_data["arch"]
            if arch not in self.arch_ability:
                continue
            ida_script = self._assemble_ida_script_args(arch)
            self.run_ida_script(config.IDA_EXE_INSTALLED_PATH, ida_script, file_abs_path)
