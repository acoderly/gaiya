import os
import inspect
import pkgutil
import shutil
import gaiya
import subprocess
import logging.handlers

from os.path import isabs
import gaiya.malware_family.config as config


class Alpha:

    def __init__(self):
        self.ida_python_module_path = os.path.join(config.IDA_PYTHON_INSTALLED_PATH, config.MODULE_NAME)
        self.ida_script_path = os.path.join(os.path.dirname(os.path.abspath(gaiya.__file__)), config.SCRIPT_PATH_NAME)

        if not os.path.exists(self.ida_python_module_path):
            os.mkdir(self.ida_python_module_path)

        # Time wait for the subprocess
        self.timeout = 10 * 60

        self.logger = self._init_logger()

    def __init_subclass__(cls, **kwargs):
        super().__init_subclass__(**kwargs)
        name = getattr(cls, "NAME", cls.__name__.lower())
        file_and_name = inspect.getfile(cls) + "::" + name
        MalwareFamily.loaded_family[file_and_name] = cls

    def _copy_file(self, src, dst):
        for item in os.listdir(src):
            src_path = os.path.join(src, item)
            dst_path = os.path.join(dst, item)
            if os.path.isdir(src_path):
                if not os.path.exists(dst_path):
                    os.mkdir(dst_path)
                self._copy_file(src_path, dst_path)
            else:
                shutil.copyfile(src_path, dst_path)

    def _init_logger(self):
        log_file = os.path.join(os.path.dirname(__file__), f"{self.NAME}_log.txt")
        handler = logging.handlers.RotatingFileHandler(log_file, maxBytes=1024 * 1024, backupCount=10)
        handler.setFormatter(logging.Formatter("%(asctime)s-:%(message)s"))
        logger = logging.getLogger(f"{self.NAME}_log")
        logger.addHandler(handler)
        logger.setLevel(logging.INFO)
        return logger

    def copy_script_to_ida(self, *args, **kwargs):
        self._copy_file(self.ida_script_path, self.ida_python_module_path)

    def run_ida_script(self, ida_exe, ida_script, file, *args, **kwargs):
        cmd = f"\"{ida_exe}\" -c -A \"-S{ida_script}\" \"{file}\""
        proc = subprocess.Popen(cmd, shell=True)
        try:
            proc.wait(timeout=self.timeout)
        except Exception as e:
            proc.kill()

    def get_current_ability(self):
        raise NotImplementedError()


family_loaded = set()


def load():
    global family_loaded

    paths = gaiya.malware_family.__path__
    paths = {p for p in paths if isabs(p) and p not in family_loaded}
    if len(paths) == 0:
        return

    modules_to_load = []
    for finder, name, _ in pkgutil.iter_modules(paths):
        found_module = finder.find_module(name)
        modules_to_load.append((name, found_module))

    for (name, module) in sorted(modules_to_load, key=lambda x: x[0]):
        try:
            _ = module.load_module(name)
        except Exception as e:
            print(f"Could not load family at '{name}':{e}")

    family_loaded.update(paths)


class MalwareFamily:
    loaded_family = {}

    def __init__(self):
        self.registered_family = {}
        load()

    def initialize(self):
        for item in self.loaded_family.values():
            self.register_family(item)

    def register_family(self, family_class):
        name = getattr(family_class, "NAME", family_class.__name__.lower())
        family_obj = family_class()
        self.registered_family[name] = family_obj
        print(f"Successfully registered plugin {name}")

    def get(self, family_name):
        return self.registered_family[family_name]
